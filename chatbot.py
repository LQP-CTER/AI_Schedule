import google.generativeai as genai
import pandas as pd
import os
from config import GOOGLE_API_KEY

# Ki·ªÉm tra API Key
if not GOOGLE_API_KEY:
    raise ValueError("API Key kh√¥ng t·ªìn t·∫°i. H√£y ki·ªÉm tra l·∫°i file config.py")

# C·∫•u h√¨nh API Key
genai.configure(api_key=GOOGLE_API_KEY)

# C·∫•u h√¨nh tham s·ªë sinh n·ªôi dung
generation_config = {
    "temperature": 0.9,
    "top_p": 1,
    "top_k": 1,
    "max_output_tokens": 3048
}

# Kh·ªüi t·∫°o model
model = genai.GenerativeModel(
    model_name="gemini-1.5-pro",
    generation_config=generation_config
)

# H√†m hi·ªÉn th·ªã file trong m·ªôt th∆∞ m·ª•c
def list_files_in_folder(folder_path):
    files = [f for f in os.listdir(folder_path) if f.endswith(('.csv', '.xls', '.xlsx'))]
    if not files:
        print("Kh√¥ng t√¨m th·∫•y file CSV ho·∫∑c Excel n√†o trong th∆∞ m·ª•c n√†y.")
        return None
    print("Danh s√°ch file kh·∫£ d·ª•ng:")
    for index, file in enumerate(files):
        print(f"{index + 1}. {file}")
    return files

# H√†m ƒë·ªçc d·ªØ li·ªáu t·ª´ file CSV ho·∫∑c Excel
def read_data_from_file(folder_path):
    files = list_files_in_folder(folder_path)
    if not files:
        return None

    try:
        file_index = int(input("Ch·ªçn file (nh·∫≠p s·ªë th·ª© t·ª±): ")) - 1
        if file_index < 0 or file_index >= len(files):
            print("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá.")
            return None

        file_path = os.path.join(folder_path, files[file_index])

        if file_path.endswith(".csv"):
            try:
                data = pd.read_csv(file_path, encoding='utf-8')
            except UnicodeDecodeError:
                data = pd.read_csv(file_path, encoding='ISO-8859-1')
        elif file_path.endswith(('.xls', '.xlsx')):
            data = pd.read_excel(file_path)
        else:
            raise ValueError("File kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£. Ch·ªâ ch·∫•p nh·∫≠n CSV ho·∫∑c Excel.")

        print(f"D·ªØ li·ªáu t·ª´ {file_path} ƒë√£ ƒë∆∞·ª£c t·∫£i th√†nh c√¥ng!")
        return data

    except Exception as e:
        print(f"L·ªói khi ƒë·ªçc file: {e}")
        return None

# H√†m t·∫°o ph·∫£n h·ªìi t·ª´ chatbot
def chat_with_bot(data=None):
    print("ü§ñ Chatbot ƒë√£ s·∫µn s√†ng! G√µ 'tho√°t' ƒë·ªÉ k·∫øt th√∫c.")
    while True:
        user_input = input("B·∫°n: ")

        if user_input.lower() == "tho√°t":
            print("T·∫°m bi·ªát! H·∫πn g·∫∑p l·∫°i! üëã")
            break

        # T√¨m ki·∫øm th√¥ng tin trong file n·∫øu c√≥ d·ªØ li·ªáu
        if data is not None:
            try:
                matched_rows = data[data['Keyword'].str.contains(user_input, case=False, na=False)]
                if not matched_rows.empty:
                    print("üîé D·ªØ li·ªáu t√¨m th·∫•y t·ª´ file:")
                    for _, row in matched_rows.iterrows():
                        print(f"- {row['Information']}")
                else:
                    print("‚ùó Kh√¥ng t√¨m th·∫•y th√¥ng tin ph√π h·ª£p trong file.")
            except KeyError:
                print("File kh√¥ng c√≥ c·ªôt 'Keyword' ho·∫∑c 'Information'. Ki·ªÉm tra l·∫°i file c·ªßa b·∫°n.")

        # G·ªçi m√¥ h√¨nh AI ƒë·ªÉ tr·∫£ l·ªùi
        try:
            response = model.generate_content(user_input)
            print("Chatbot:", response.text)
        except Exception as e:
            print(f"L·ªói t·ª´ m√¥ h√¨nh AI: {e}")

# Kh·ªüi ch·∫°y ch∆∞∆°ng tr√¨nh
if __name__ == "__main__":
    folder_path = input("Nh·∫≠p ƒë∆∞·ªùng d·∫´n th∆∞ m·ª•c ch·ª©a file CSV ho·∫∑c Excel: ")
    if os.path.isdir(folder_path):
        data = read_data_from_file(folder_path)
    else:
        print("Th∆∞ m·ª•c kh√¥ng t·ªìn t·∫°i. Ch∆∞∆°ng tr√¨nh s·∫Ω ch·∫°y m√† kh√¥ng c√≥ file d·ªØ li·ªáu.")
        data = None

    chat_with_bot(data)
